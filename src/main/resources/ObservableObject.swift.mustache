//
// Copyright 2021 Mikołaj Leszczyński & Appmattus Limited
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import SwiftUI
import Combine
import {{frameworkName}}

public class {{className}}ObservableObject : ObservableObject {

{{#hasState}}    @Published public private(set) var state: {{stateType}}
{{/hasState}}{{#hasSideEffect}}    public private(set) var sideEffect: AnyPublisher<{{sideEffectType}}, Never>
{{/hasSideEffect}}

    private var wrapped: {{className}}

    init(wrapped: {{className}}) {
        self.wrapped = wrapped
{{#hasState}}        self.state = wrapped.container.stateFlow.value as! {{stateType}}
{{/hasState}}{{#hasSideEffect}}        self.sideEffect = wrapped.container.sideEffectFlow.asPublisher() as AnyPublisher<{{sideEffectType}}, Never>
{{/hasSideEffect}}{{#hasState}}
        (wrapped.container.stateFlow.asPublisher() as AnyPublisher<{{stateType}}, Never>)
                .receive(on: RunLoop.main)
                .assign(to: &$state){{/hasState}}
    }{{#functions}}

    public func {{name}}({{#parameters}}{{^-first}}, {{/-first}}{{name}}: {{type}}{{/parameters}}) {
        wrapped.{{name}}({{#parameters}}{{^-first}}, {{/-first}}{{name}}: {{name}}{{/parameters}})
    }{{/functions}}

    deinit {
        wrapped.onCleared()
    }
}

public extension {{className}} {
    func asObservableObject() -> {{className}}ObservableObject {
        return {{className}}ObservableObject(wrapped: self)
    }
}
